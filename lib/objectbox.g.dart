// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Storage/models/address.dart';
import 'Storage/models/email.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7075052845957833006),
      name: 'Email',
      lastPropertyId: const IdUid(13, 6128485485393678008),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2137606356965771187),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1339872323771446631),
            name: 'from',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 639111016989562337),
            name: 'to',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 133408278424179980),
            name: 'subject',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3717517237733277200),
            name: 'body',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4166817512669764604),
            name: 'receivedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4260523706248214418),
            name: 'uniqueId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1561888144957058185),
            name: 'senderName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 776701948814768806),
            name: 'hasAttachment',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7075464916247645283),
            name: 'isRead',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 178470870363165349),
            name: 'isFlagged',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2233865941418562763),
            name: 'isTrashed',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6256951143984616053),
      name: 'Address',
      lastPropertyId: const IdUid(3, 3809527452118149822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7722912678837494629),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3736889626014911024),
            name: 'mailAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3809527452118149822),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6256951143984616053),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [6128485485393678008],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Email: EntityDefinition<Email>(
        model: _entities[0],
        toOneRelations: (Email object) => [],
        toManyRelations: (Email object) => {},
        getId: (Email object) => object.id,
        setId: (Email object, int id) {
          object.id = id;
        },
        objectToFB: (Email object, fb.Builder fbb) {
          final fromOffset = fbb.writeString(object.from);
          final toOffset = fbb.writeString(object.to);
          final subjectOffset = fbb.writeString(object.subject);
          final bodyOffset = fbb.writeString(object.body);
          final senderNameOffset = fbb.writeString(object.senderName);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, fromOffset);
          fbb.addOffset(2, toOffset);
          fbb.addOffset(3, subjectOffset);
          fbb.addOffset(4, bodyOffset);
          fbb.addInt64(5, object.receivedDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.uniqueId);
          fbb.addOffset(7, senderNameOffset);
          fbb.addBool(8, object.hasAttachment);
          fbb.addBool(9, object.isRead);
          fbb.addBool(10, object.isFlagged);
          fbb.addBool(11, object.isTrashed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Email(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              from: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              to: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              subject: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              body: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              receivedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              uniqueId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              hasAttachment: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              senderName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              isRead: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              isFlagged: const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false),
              isTrashed: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false));

          return object;
        }),
    Address: EntityDefinition<Address>(
        model: _entities[1],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.id,
        setId: (Address object, int id) {
          object.id = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final mailAddressOffset = fbb.writeString(object.mailAddress);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mailAddressOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Address(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              mailAddress: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Email] entity fields to define ObjectBox queries.
class Email_ {
  /// see [Email.id]
  static final id = QueryIntegerProperty<Email>(_entities[0].properties[0]);

  /// see [Email.from]
  static final from = QueryStringProperty<Email>(_entities[0].properties[1]);

  /// see [Email.to]
  static final to = QueryStringProperty<Email>(_entities[0].properties[2]);

  /// see [Email.subject]
  static final subject = QueryStringProperty<Email>(_entities[0].properties[3]);

  /// see [Email.body]
  static final body = QueryStringProperty<Email>(_entities[0].properties[4]);

  /// see [Email.receivedDate]
  static final receivedDate =
      QueryIntegerProperty<Email>(_entities[0].properties[5]);

  /// see [Email.uniqueId]
  static final uniqueId =
      QueryIntegerProperty<Email>(_entities[0].properties[6]);

  /// see [Email.senderName]
  static final senderName =
      QueryStringProperty<Email>(_entities[0].properties[7]);

  /// see [Email.hasAttachment]
  static final hasAttachment =
      QueryBooleanProperty<Email>(_entities[0].properties[8]);

  /// see [Email.isRead]
  static final isRead = QueryBooleanProperty<Email>(_entities[0].properties[9]);

  /// see [Email.isFlagged]
  static final isFlagged =
      QueryBooleanProperty<Email>(_entities[0].properties[10]);

  /// see [Email.isTrashed]
  static final isTrashed =
      QueryBooleanProperty<Email>(_entities[0].properties[11]);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.id]
  static final id = QueryIntegerProperty<Address>(_entities[1].properties[0]);

  /// see [Address.mailAddress]
  static final mailAddress =
      QueryStringProperty<Address>(_entities[1].properties[1]);

  /// see [Address.name]
  static final name = QueryStringProperty<Address>(_entities[1].properties[2]);
}
